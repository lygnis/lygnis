struct VS_IN
{
	float3 p : POSITION;
	float3 n : NORMAL;
    float4 c : COLOR;
	float2 t : TEXCOORD;

	float4 index : INDEX;
	float4 weight : WEIGHT;
};
struct VS_OUT
{
	float4 p : SV_POSITION;
	float3 n : NORMAL;
	float4 c : COLOR0;
	float2 t : TEXCOORD0;
};
// 상수버퍼는 레지스터 단위로만 저장된다.
// 레지스터 단위란 :  float4(x,y,z,w)
cbuffer cb_data : register(b0)
{
	row_major matrix g_matWorld : packoffset(c0);
	row_major matrix g_matView : packoffset(c4);
	row_major matrix g_matProj : packoffset(c8);
	float  fTimer : packoffset(c12.z);
};
cbuffer cb_Animation : register(b1)
{
	matrix  g_matBone[255];
};
VS_OUT VS(VS_IN input) 
{
	VS_OUT output = (VS_OUT)0;
	float4 vLocal = float4(input.p,1.0f);
	float4 vAnim =0;
	float4 vAnimNormal =0;
	for(int iBone =0; iBone<4; iBone++)
	{
		uint iBoneIndex = input.index[iBone];
		float fWeight = input.weight[iBone];
		vAnim += mul(vLocal, g_matBone[iBoneIndex])* fWeight;
		vAnimNormal += mul(input.n, g_matBone[iBoneIndex]) * fWeight;
	}
	float4 vWorld = mul(g_matWorld, vAnim );
	float4 vView = mul(g_matView, vWorld );
	float4 vProj = mul(g_matProj,vView );	
	output.p = vProj;
	output.n = input.n;
	output.c = input.c;
	output.t = input.t;
	return output;
}

Texture2D    g_txTex			: register(t0);
SamplerState g_SampleWrap		: register(s0);

float4 PS(VS_OUT input) : SV_Target
{
	float4 vColor = g_txTex.Sample(g_SampleWrap , input.t);
	vColor.w = 1.0f;

	return input.c * vColor;
}
	
	
	// 중요:  mul 함수는 내적으로 처리된다.
	// vWolrd.x = vLocal dot c0; // 행*행
	// vWolrd.y = vLocal dot c1;
	// vWolrd.z = vLocal dot c2;
	// vWolrd.w = vLocal dot c3;	
	// matrix matTranspose = transpose(g_matWorld);
	//input.p.w = 1.0f;